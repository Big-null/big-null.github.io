{"/":{"title":"Introduction","data":{"":"Welcome to Big null!","references#References":"All the public workshops, documents and code will be archive in here for better reading usage."}},"/lifeIsPossible/Lecture/lecture-02/lecture-02":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 02 - Introduce to HTML\nWhat and Why of HTML\nConcepts of HTML\nBasics HTML structure\nReading Tags and Docs","python-c-ruby-java#Python? C++? Ruby? Java?":"In brief:\nHTML is the standard markup language for creating Web pages\nHTML describes the structure of a Web page\nHTML consists of a series of elements\nHTML elements tell the browser how to display the content\nHTML elements label pieces of content such as \"this is a heading\", \"this is a paragraph\", \"this is a link\", etc.\n✨ Easy to learn.\n💻 Every browser supports HTML Language. (Cross platform)\n⚡ HTML is light weighted and fast to load.\nAnd more ...\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Life is Possible ar</title>\n</head>\n<body>\n    <!-- All stuff here -->\n    <h1> Hello mate </h1>\n</body>\n</html>\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n      <!-- All Style / CSS / Headerstuff here -->\n      <!-- To define meta tags, css file, title is here -->\n  </head>\n  <body>\n      <!-- All HTML / JS stuff here -->\n      <!-- To define visible stuff and JS script here -->\n  </body>\n</html>\nThose tags are important to fimilar withhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/html\nThe <html> HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.\nAKA, to tell the computer that this file is a HTML file.https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\nThe <head> HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets.\nAKA, to tell the computer those items are title, scripts, and style sheets.https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\nThe <body> HTML element represents the content of an HTML document. There can be only one <body> element in a document.\nAKA, to tell the computer those represents the content are between this tag.index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Life is Possible ar</title>\n</head>\n<body>\n    <!-- All stuff here -->\n    <h1> Hello mate </h1>\n</body>\n</html>\nSeveral tags are in pairs, but some tags are not.\ne.g. (Pair: <body>...</body>, Single <meta>)\nSee the documents and tutorials to check the usage.","div--basic-box-tag#<div> : Basic Box tag":"","header--store-the-web-header-content#<header> : Store the web header content":"","section--store-content-regarding-each-sections#<section> : Store content regarding each sections":"","footer--store-the-web-footer-content#<footer> : Store the web footer content":"","usually-html-tags-are-in-paris#Usually html tags are in paris":"Opening      End\n    <div>      </div>\n<div>some stuff inside the box</div>\n<header>some stuff inside the box</header>\n<footer>some stuff inside the box</footer>","tags-can-nested-together-as-long-as-your-syntax-is-correct#Tags can nested together, as long as your syntax is correct":"<div>\n  <div>hello</div>\n  <div>\n    <div>hello</div>\n    <div>yolo</div>\n  </div>\n</div>\nRef: https://www.interviewbit.com/blog/difference-between-html-and-css/\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n    <header>Hello all</header>\n    <div>\n        <h1>Hello</h1>\n    </div>\n    <footer>Bye</footer>\n</body>\n</html>\n<h1>–<h6>: Header text tags to contain string.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\n<p>: The Paragraph element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\n<span>: Generic inline container.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\n<br>: Line Break element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\n<b>: The Bring Attention To element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n    <h1>Hello</h1>\n    <h2>Hello 2</h2>\n    <h3>Hello 3</h3>\n    <br>\n    <p>Yoooo</p>\n    <span>Apple</span>\n    <b>I am strong</b>\n</body>\n</html>\n<img>: The Image Embed element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\n<hr>: The Thematic Break (Horizontal Rule) element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\n<a>: The Anchor element.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n  <a href=\"https://youtu.be/dQw4w9WgXcQ\"> Funny youtube video </a>\n  <hr>\n  <img \n    src=\"/media/orange.jpg\"\n    alt=\"I am a orange\"\n  >\n</body>\n</html>\n<ul>, <ol>, <li>: unorder list, order list and list item\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\nWill be cover more in later JS lessons\n<button>\n<form>\n<input>\n<option>\nSee here to know what we can use in HTML:\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Reference","-remember-searching-google-and-documents-is-the-key-to-code-#‼ Remember: Searching google and documents is the key to code. ‼":"Try to code the regarding images with html code.Notes: The 😀 is an emoji.With the following template, try to intruduce yourself with an html pages.\n(Either English or Chinese is ok)\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Peter homepages</title>\n</head>\n<body>\n  <!-- Your content -->\n</body>\n</html>\nYou SHOULD contain these items in your intro:\n📃 Name and a short intro to describe yourself\n📚 4 Favourite stuff to share, 3 friend name and more...\n✏ Proper layout and UI to design the site\nYou MAY contain these items in your intro:\n✨ More you can think of ...\nAfter the works, you will have a 30 - 60 seconds time to present the website to others. Rename the site.html to <your-name>_l01_lab02.html e.g. peter_l01_lab02.htmlYou may submit the site to google form in here:\n(Link will be share in lecture time)\nw3school HTML Tutorial\nhttps://www.w3schools.com/html/\nHow to structure HTML for an actual website\nhttps://zellwk.com/blog/html-structure/"}},"/lifeIsPossible/Lecture/lecture-02/lecture-02-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"講課 02 - 基本的HTML架構\nHTML的定義和作用\nHTML的概念\n基本的HTML架構\n閱讀標籤和文件","python-c-ruby-java#Python? C++? Ruby? Java?":"(超文字標記語言)簡而言之：\nHTML是創建網頁的標準標記語言\nHTML描述了網頁的結構\nHTML由一系列元素組成\nHTML元素告訴瀏覽器如何顯示內容\nHTML元素標記內容的不同部分，例如“這是標題”、“這是段落”、“這是鏈接”等等。\n✨ 容易學習\n💻 每個瀏覽器都支持HTML語言（跨平台）\n⚡ HTML是輕量級(Lightweight)的，加載速度快\n等等 ...\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Life is Possible ar</title>\n</head>\n<body>\n    <!-- All stuff here -->\n    <h1> Hello mate </h1>\n</body>\n</html>\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n      <!-- All Style / CSS / Headerstuff here -->\n      <!-- To define meta tags, css file, title is here -->\n  </head>\n  <body>\n      <!-- All HTML / JS stuff here -->\n      <!-- To define visible stuff and JS script here -->\n  </body>\n</html>\n這些標籤是很重要的基礎知識https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html\n<html> 元素代表HTML文檔的根（頂級元素），因此也被稱為根元素。所有其他元素都必須是此元素的子孫元素。\n也就是說，告訴電腦這個文件是一個HTML文件。https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\n<head>元素包含有關文檔的機器可讀信息（元數據），例如其標題，腳本和樣式表。\n也就是說，告訴電腦這些項目是標題，腳本和樣式表。https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\n<body> HTML 元素表示 HTML 文檔的內容。一個文檔中只能有一個 <body> 元素。\n也就是說，告訴電腦這些在這些標籤之間的部分是 HTML 文檔的內容。index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Life is Possible ar</title>\n</head>\n<body>\n    <!-- All stuff here -->\n    <h1> Hello mate </h1>\n</body>\n</html>\n有些標籤是成對出現的，但有些標籤不是。\n例如：（成對出現：<body>...</body>，單獨出現：<meta>）\n請查閱文件和教程以檢查其使用方法。","div--基本框盒標籤#<div> : 基本框盒標籤":"","header--儲存網頁頁首內容#<header> : 儲存網頁頁首內容":"","section--儲存各個區域的內容#<section> : 儲存各個區域的內容":"","footer--儲存網頁頁尾內容#<footer> : 儲存網頁頁尾內容":"","通常-html-標籤是成對出現的#通常 HTML 標籤是成對出現的":"開始標籤    結束標籤\n    <div>      </div>\n<div>some stuff inside the box</div>\n<header>some stuff inside the box</header>\n<footer>some stuff inside the box</footer>","標籤可以互相嵌套只要語法正確即可#標籤可以互相嵌套，只要語法正確即可":"<div>\n  <div>hello</div>\n  <div>\n    <div>hello</div>\n    <div>yolo</div>\n  </div>\n</div>\nRef: https://www.interviewbit.com/blog/difference-between-html-and-css/\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n    <header>Hello all</header>\n    <div>\n        <h1>Hello</h1>\n    </div>\n    <footer>Bye</footer>\n</body>\n</html>\n<h1>–<h6>: 標題文字標籤，用於包含文字。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\n<p>: 段落元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\n<span>: 通用的內嵌容器。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\n<br>:  斷行元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\n<b>: 強調元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n    <h1>Hello</h1>\n    <h2>Hello 2</h2>\n    <h3>Hello 3</h3>\n    <br>\n    <p>Yoooo</p>\n    <span>Apple</span>\n    <b>I am strong</b>\n</body>\n</html>\n<img>: 圖片嵌入元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\n<hr>: 分隔線 (水平線) 元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\n<a>: 錨點元素。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hi all</title>\n</head>\n<body>\n  <a href=\"https://youtu.be/dQw4w9WgXcQ\"> Funny youtube video </a>\n  <hr>\n  <img \n    src=\"/media/orange.jpg\"\n    alt=\"I am a orange\"\n  >\n</body>\n</html>\n<ul>, <ol>, <li>: 無序清單、有序清單和清單項目。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n稍後會在 JS 課程中進一步介紹。\n<button>\n<form>\n<input>\n<option>\n查看此處以了解我們可以在 HTML 中使用什麼：\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Reference","-記住搜尋-google-和文件是編碼的關鍵-#‼ 記住：搜尋 Google 和文件是編碼的關鍵。 ‼":"嘗試使用 html 代碼編寫相關圖像。註： 😀 是一個表情符號。使用以下模板，嘗試用 HTML 頁面介紹自己。\n(中英文都可以)\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Peter homepages</title>\n</head>\n<body>\n  <!-- Your content -->\n</body>\n</html>\n你的網頁應包含Must以下內容：\n📃 名字和簡短介紹\n📚 分享4個喜愛的事物，3個朋友的名字等等\n✏ 適當的佈局和UI設計\n你也可以包含Should以下內容：\n✨ 其他你能想到的內容...\n完成後，你會有30-60秒的時間向其他人展示你的網站。將site.html重新命名為 <your-name>_l01_lab02.html，例如 peter_l01_lab02.html 。你可以將網站提交到以下google表格中：\n（連結將在課堂時間分享）\nw3school HTML教程\nhttps://www.w3schools.com/html/\n如何為實際網站結構化HTML\nhttps://zellwk.com/blog/html-structure/"}},"/lifeIsPossible/Lecture/lecture-03/lecture-03-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"講課 03 - CSS和Bulma入門\nCSS是什麼和為什麼要用CSS\nCSS的概念\nHTML中的class和id概念\n基本CSS結構\n讀取CSS樣式和文件\nBulma的基本使用\n在您之前的Lab 02 HTML任務中，網站看起來漂亮嗎？演示：\nhttps://81-web.com/\nhttps://1guu.jp/","也稱為css可用於非常基本的文檔文本樣式#也稱為：CSS可用於非常基本的文檔文本樣式":"所有內容和文本例如：人體骨骼和肌肉 💀所有樣式和UI的外觀例如：人體皮膚和頭髮 🎅\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        #apple {\n            color: red;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"apple\">I am an apple.</h1>\n</body>\n</html>\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <!-- Skipped -->\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <h1 class=\"apple\">I am an apple.</h1>\n</body>\n</html>\nindex.css\n.apple {\n    color: red;\n    text-align: center;\n}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    \n</head>\n<body>\n    <h1 style=\"color: red; text-align: center;\">\n        I am an apple.\n    </h1>\n</body>\n</html>\n半推薦 👍最推薦 👍👍不推薦 🤚試著在一個文件夾中創建一個 index.html 和 index.css，然後將這些內容複製到每個文件夾中。index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta \n      name=\"viewport\" \n      content=\"width=device-width, initial-scale=1.0\"\n    >\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <h1 class=\"school\">Hello schools.</h1>\n</body>\n</html>\nindex.css\n.school {\n    color: #FF00FF;\n    text-align: right;\n}\n像上面的例子，您可能會看到以下代碼：\n<h1 class=\"school\">Hello schools.</h1>\n<h1 id=\"apple\">I am an apple.</h1>\n那麼，什麼是 id 和 class？在一般的介紹中，它說：\nid 屬性為 HTML 元素指定唯一的 id。id 屬性的值在 HTML 文檔中必須是唯一的。\nclass 屬性通常用於指向樣式表中的 class 名稱。它也可以被 JavaScript 用來訪問和操作具有特定 class 名稱的元素。\n即：我們使用 id 和 class 來指向我們想要對其應用某些內容的元素。\n（例如：應用一些樣式、事件、控制相關元素等等）\nid 是唯一的標籤，它只能引用一個元素。\nclass 可以同時應用於許多元素。\n正確 ⭕\n<h1 id=\"apple\">I am an apple.</h1>\n<h3 class=\"school\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>\n錯誤 ❌（不能重複使用相同的 id）\n<h1 id=\"apple\">I am an apple.</h1>\n<h1 id=\"apple\">Hello schools 1.</h1>\n<h3 class=\"school\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>","更多正確例子#更多正確例子":"正確 ⭕\n<h1 id=\"apple\">I am an apple.</h1>\n<h3 id=\"orange\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>\n正確 ⭕\n<h1 id=\"apple\" class=\"school\">I am an apple.</h1>\n<h3 id=\"orange\">Hello schools 3.</h3>\n<h2 class=\"school boxes\">Hello schools 2.</h2>\nclass 可以同時套用到多個元素上，而 id 僅能套用到一個元素。\n正確  ⭕\n<h2 class=\"school\">Hello schools 2.</h2>\n<h2 class=\"boxes\">Hello schools 2.</h2>\n<h2 class=\"school boxes\">Hello tom</h2>\n在上面的範例中，\"Hello tom\" 元素可以使用 school 和 boxes 兩個 class 的樣式。錯誤 ❌ （id 不可以重複使用）\n<h1 id=\"apple orange\">I am an apple.</h1>\n要連結一個 id，我們使用 # 來表示以下的標籤是一個 id 的參考。index.css\n#apple {\n    color: red;\n    text-align: center;\n}\n#orange {\n    color: yellow;\n}\nindex.html\n<h1 id=\"apple\">I am an apple.</h1>\n<h1 id=\"orange\">I am an orange?</h1>\n要連結一個 class，我們在 CSS 中使用 . 來表示接下來的標籤是一個 class 的引用。index.css\n.apple-class {\n    color: red;\n    text-align: center;\n}\n.box {\n    font-size: 30px\n}\nindex.html\n<div class=\"box\">\n  I am an apple.\n</div>\n<h1 class=\"apple-class box\">\n  I am an apple also\n</h1>","css-檔案#CSS 檔案":"所有的 CSS 樣式都會被放在一起。\n.apple-class {\n    color: red;\n    text-align: center;\n}\n.box {\n    font-size: 30px\n}\n#apple {\n    color: red;\n    text-align: center;\n}\n#orange {\n    color: yellow;\n}\n📚 顏色樣式\n🖼 佈局樣式\n✒ 文字樣式\n🎠 動畫\n🧰 大小和高度\n📅 顯示方式\n📊 還有更多...\n邏輯控制\n處理互動事件\n控制當某些事情發生時的顯示方式\n這些是 JavaScript 的功能，我們將在下一課學習 JavaScript。所有參考在：\nhttps://www.w3schools.com/css/default.asp\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\n有些標籤可能不常用、已廢棄或是相對較新，因此我們無法在短時間內介紹所有標籤。\n根據需求，您應該根據自己的需求進行谷歌搜索/查找文檔。即使是高級程序員也無法記住所有的語法和代碼。不要試圖記住所有的語法，而是概念上理解 CSS 可以應用的格式。\n常用文本相關\n.some-class {\n  color: blue;\n  text-align: center;\n  font-size: 100px;\n  font-weight: 600;\n  font-family: 'Courier New', Courier, monospace;\n}\n更多:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/font\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-align通用的背景顏色和其他樣式\n.some-class {\n  background-color: #123F02;\n  text-shadow: 2px 2px;\n  box-shadow: 10px 10px;\n}","通用佈局實用程序#通用佈局實用程序":"margin (外邊框): https://www.w3schools.com/css/css_margin.asp\npadding (内邊框): https://www.w3schools.com/css/css_padding.asp\nHeight, Width (高度、寬度): https://www.w3schools.com/css/css_dimension.asp\nborder (邊框): https://www.w3schools.com/css/css_border.asp\nfloat (位置): https://www.w3schools.com/css/css_float.asp","通用佈局實用程序更多#通用佈局實用程序(更多)":"position (位置) : https://www.w3schools.com/css/css_positioning.asp\ndisplay (現出) : https://www.w3schools.com/css/css_display_visibility.asp\nz-index (層): https://www.w3schools.com/css/css_z-index.asp","通用佈局實用程序更多-1#通用佈局實用程序(更多)":"display: flex\njustify-content: flex-start | flex-end | center | space-between | space-around;\nalign-items: flex-start | flex-end | center | baseline | stretch;\nhttps://www.casper.tw/css/2017/07/21/css-flex/","display-flex-演示#display flex 演示":"https://grid.malven.co/","display-flex-練習遊戲#display flex 練習遊戲":"https://flexboxfroggy.com/Bulma 是一個免費、開源的框架，提供了現成的前端元件，可以輕鬆地組合來建構響應式網頁介面。https://bulma.io/documentation/overview/start/\n提供良好的元件可供使用\n有好看的介面\n容易建構響應式網站 (responsive website)\n寫少量的 CSS","在-html-中安裝-bulma#在 HTML 中安裝 Bulma":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css\">\n  </head>\n  <body>\n  <section class=\"section\">\n    <div class=\"container\">\n      <h1 class=\"title\">\n        Hello World\n      </h1>\n      <p class=\"subtitle\">\n        My first website with <strong>Bulma</strong>!\n      </p>\n    </div>\n  </section>\n  </body>\n</html>","columns-列#Columns (列)":"https://bulma.io/documentation/columns/basics/","elements-元素#Elements (元素)":"Button (按鈕): https://bulma.io/documentation/elements/button/\nBox (盒子): https://bulma.io/documentation/elements/box/\nTitle (標題): https://bulma.io/documentation/elements/title/\n更多: https://bulma.io/documentation/elements/","components-部件#Components (部件)":"Navbar (導航欄): https://bulma.io/documentation/components/navbar/\nCard (卡片): https://bulma.io/documentation/components/card/\n更多: https://bulma.io/documentation/components/還記得之前在 lecture 02 的 自我介紹 頁面嗎？\n現在，讓我們使用更多的 CSS 和 bulma 來美化它 ！以下是您的頁面應該添加的一些內容：\n👩‍🎨 文本顏色 和 背景顏色 (Text Color and background color)\n🎴 字體大小，文本對齊 (Font size, text align)\n🎛 邊框 (Border)\n📣 至少兩個來自 bulma 的元素 (bulma)\n以下是您可以添加到您的頁面的一些內容：\n📦 更多的 bulma 組件和佈局\n🛒 任何您能想到的更多內容..."}},"/lifeIsPossible/Lecture/lecture-03/lecture-03":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 03 - Introduce to CSS and bulma\nWhat and Why of CSS\nConcepts of CSS\nConcepts of classe, and id in HTML\nBasics CSS structure\nReading CSS style and documents\nBasic use of bulma\nDoes the website looks beautiful at your previous Lab 02 HTML task?Demo:\nhttps://81-web.com/\nhttps://1guu.jp/","aka-css-can-be-used-for-very-basic-document-text-styling#AKA: CSS can be used for very basic document text styling":"All you contents and texte.g Humans body bones and muscles 💀All you style and hows the UI looke.g Humans Skin and hair 🎅\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        #apple {\n            color: red;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"apple\">I am an apple.</h1>\n</body>\n</html>\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <!-- Skipped -->\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <h1 class=\"apple\">I am an apple.</h1>\n</body>\n</html>\nindex.css\n.apple {\n    color: red;\n    text-align: center;\n}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    \n</head>\n<body>\n    <h1 style=\"color: red; text-align: center;\">\n        I am an apple.\n    </h1>\n</body>\n</html>\nSemi-recommended 👍Most recommended 👍👍Lessly-recommended 🤚Try to create a index.html and index.css inside a folder.\nthen copy these stuff inside each folder.index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta \n      name=\"viewport\" \n      content=\"width=device-width, initial-scale=1.0\"\n    >\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n    <h1 class=\"school\">Hello schools.</h1>\n</body>\n</html>\nindex.css\n.school {\n    color: #FF00FF;\n    text-align: right;\n}\nAs the top examples, you may have seen the following code:\n<h1 class=\"school\">Hello schools.</h1>\n<h1 id=\"apple\">I am an apple.</h1>\nSo, what is the id and class?In general introductions, it said:\nThe id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.\nThe class attribute is often used to point to a class name in a style sheet. It can also be used by a JavaScript to access and manipulate elements with the specific class name.","aka-we-use-id-and-class-to-point-to-the-elements-that-we-want-to-apply-something-in-that-elements#AKA: We use id and class to POINT to the elements that we want to apply something in that elements.":"(e.g. Apply some style, events, control the regarding elements ...)\nid is a unique tags, it can only references to ONE element only.\nclass can be apply to a lot of elements at the same time.\nCorrect ⭕\n<h1 id=\"apple\">I am an apple.</h1>\n<h3 class=\"school\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>\nWrong ❌ (same id can not be reuse again)\n<h1 id=\"apple\">I am an apple.</h1>\n<h1 id=\"apple\">Hello schools 1.</h1>\n<h3 class=\"school\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>","more-correct-samples#More correct samples":"Correct ⭕\n<h1 id=\"apple\">I am an apple.</h1>\n<h3 id=\"orange\">Hello schools 3.</h3>\n<h2 class=\"school\">Hello schools 2.</h2>\nCorrect ⭕\n<h1 id=\"apple\" class=\"school\">I am an apple.</h1>\n<h3 id=\"orange\">Hello schools 3.</h3>\n<h2 class=\"school boxes\">Hello schools 2.</h2>\nclass can multi apply to various elements, id can not.\nCorrect ⭕\n<h2 class=\"school\">Hello schools 2.</h2>\n<h2 class=\"boxes\">Hello schools 2.</h2>\n<h2 class=\"school boxes\">Hello tom</h2>\nIn this top example, the Hello tom elements can use the css of both class school and boxesWrong ❌ (id can not be apply more than one time)\n<h1 id=\"apple orange\">I am an apple.</h1>\nTo link a id, we use # to represent the following tag is a id references.index.css\n#apple {\n    color: red;\n    text-align: center;\n}\n#orange {\n    color: yellow;\n}\nindex.html\n<h1 id=\"apple\">I am an apple.</h1>\n<h1 id=\"orange\">I am an orange?</h1>\nTo link a class, we use . in css to represent the following tag is a class references.index.css\n.apple-class {\n    color: red;\n    text-align: center;\n}\n.box {\n    font-size: 30px\n}\nindex.html\n<div class=\"box\">\n  I am an apple.\n</div>\n<h1 class=\"apple-class box\">\n  I am an apple also\n</h1>\nAll the css style will be put together.\n.apple-class {\n    color: red;\n    text-align: center;\n}\n.box {\n    font-size: 30px\n}\n#apple {\n    color: red;\n    text-align: center;\n}\n#orange {\n    color: yellow;\n}\nColor style\nLayout style\nText style\nAnimations\nSize and height\nDisplay method\nAnd more ...\nLogics control\nHandling event for interactions\nControl display when something happens\nThese are the functions of javascript to do, we will learn javascript in the next lesson.All references in:\nhttps://www.w3schools.com/css/default.asp\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/accent-color\nSome tags are not very common / deprecated / relatively new, hence we can't introduce all tags in a short period.\nDepends on the needed, you should google it / search the docs as your requirement. Even a senior programmer can't memorized all syntax and codes. Don't try to memorized all syntax, but the concepts that which css format can be apply.","common-text-related#Common Text related":".some-class {\n  color: blue;\n  text-align: center;\n  font-size: 100px;\n  font-weight: 600;\n  font-family: 'Courier New', Courier, monospace;\n}\nMore:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/font\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-align","common-background-color-and-others#Common background color and others":".some-class {\n  background-color: #123F02;\n  text-shadow: 2px 2px;\n  box-shadow: 10px 10px;\n}","common-layout-utilis#Common layout utilis":"margin: https://www.w3schools.com/css/css_margin.asp\npadding: https://www.w3schools.com/css/css_padding.asp\nHeight, Width: https://www.w3schools.com/css/css_dimension.asp\nborder: https://www.w3schools.com/css/css_border.asp\nfloat: https://www.w3schools.com/css/css_float.asp","common-layout-utilis-advance#Common layout utilis (Advance)":"position : https://www.w3schools.com/css/css_positioning.asp\ndisplay : https://www.w3schools.com/css/css_display_visibility.asp\nz-index : https://www.w3schools.com/css/css_z-index.asp","common-layout-utilis-important#Common layout utilis (Important)":"display: flex\njustify-content: flex-start | flex-end | center | space-between | space-around;\nalign-items: flex-start | flex-end | center | baseline | stretch;\nhttps://www.casper.tw/css/2017/07/21/css-flex/","display-flex-demo#display flex demo":"https://grid.malven.co/","display-flex-practice-game#display flex practice game":"https://flexboxfroggy.com/\nBulma is a free, open source framework that provides ready-to-use frontend components that you can easily combine to build responsive web interfaces.\nhttps://bulma.io/documentation/overview/start/\nBuilded decent components to use\nDecent UI\nEasy responsive website setting\nWrite less CSS","install-in-html#Install in HTML":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Hello Bulma!</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css\">\n  </head>\n  <body>\n  <section class=\"section\">\n    <div class=\"container\">\n      <h1 class=\"title\">\n        Hello World\n      </h1>\n      <p class=\"subtitle\">\n        My first website with <strong>Bulma</strong>!\n      </p>\n    </div>\n  </section>\n  </body>\n</html>","columns#Columns":"https://bulma.io/documentation/columns/basics/","elements#Elements":"Button: https://bulma.io/documentation/elements/button/\nBox: https://bulma.io/documentation/elements/box/\nTitle: https://bulma.io/documentation/elements/title/\nAnd more: https://bulma.io/documentation/elements/","components#Components":"Navbar: https://bulma.io/documentation/components/navbar/\nCard: https://bulma.io/documentation/components/card/\nAnd more: https://bulma.io/documentation/components/Remember the previous Introduce yourself page from lecture 02?\nLet's create more CSS and bulma to decorate it!Something that you Should add to your pages\nText Color and background color\nFont size, text align\nBorder\nAt least two elements that from bulma\nSomething that you Can add to your pages\nMore bulma components and layout stuff\nMore you can think of ..."}},"/lifeIsPossible/Lecture/lecture-04/lecture-04-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"講課 04 - JavaScript 簡介\n深入探索程式設計\n介紹使用 JavaScript 實現真正的程式設計\n對於初學者來說相對容易學習\n只需學習一次，可在任何地方使用 (Web / 桌面 / Linux)\n在全球具有高度的普及度\nhttps://www.stackscale.com/blog/most-popular-programming-languages/\n有龐大的社群支援以及擁有豐富的庫支援 npm\n🖥 網頁瀏覽器 (使用 V8 引擎)\n📱 Android (使用 V8 引擎和瀏覽器)\n📲 IOS (使用 V8 引擎和瀏覽器)\n🖥 Windows (使用 Nodejs)\n💻 MacOS (使用 Nodejs)\n🖱 Linux (使用 Nodejs)\n幾乎你日常生活中所看到的任何東西都可以運行 JavaScript。app.js\nlet str = \"reemo\"\nconsole.log(\"Hello all\");\nconsole.log(str);\nconsole.log(\"This is \" + str);\n然後在終端機中輸入 node app.js 以執行腳本。注意：如果您沒有安裝 nodejs，請立即從 https://nodejs.org/en/ 安裝它。這是 JavaScript 中用來列印訊息的基本函數","用法#用法":"console.log(\"Hello world\"); // \"Hello world\"\nconsole.log(\"Hello \" + \"Peter\"); // \"Hello Peter\"\nconsole.log(\"Hello\", \"Peter\"); // \"Hello Peter\"\nconsole.log(100); // 100\nconsole.log(100 + 45); // 145\n資料類型 Data Types\n算術運算子 Arithmetic Operators\n賦值運算子 Assignment Operators\n定義變數 Define variables\n條件語句 Conditional Statements\n比較語句 Compare Statements\n函式 Functions\n用於解釋代碼，並使其更可讀\n註解中的代碼將不會運行/執行/編譯\n單行註解以 // 開頭。\n// I will not run\n// console.log(\"Hello\")\n// Hello mate\nconsole.log(\"yo hi\")\n多行註解以 /* 開頭，以 */ 結尾.\n/*\nHello\nThis is multi line comments\nI can contains a lot of stuff\nin the same block\nconsole.log(\"Yoooo\")\n*/\nconsole.log(\"mate\")\nstring 字串型別，例如 \"Hello\", \"Good day\", \"I go to school by bus\"\nnumber 數值型別，例如 12, -3, 32.476, 0x012, 11010010\nboolean 布林型別，例如 true, false\n顯示常見的字串 / 字元\n\"Hello world\", \"a\", \"😀\" (Using \" ) （使用雙引號）\n'Hello mate', 'b', '😍' (Using ' ) （使用單引號）\n`Hello mom`, `c`, `😎` (Using ` ) （使用反引號）\n代表數學運算中的數值資料型別 ( +, -, *, /, % )\nInteger 整數: 1, 384\nSigned Integer 有正負號的整數: 1, 384, -43\nFloat / Double 浮點數 / 雙精度浮點數: 1.23, -34.3423, 0.001\n(Float 浮點數 = 單精度，Double 雙精度浮點數 = 雙精度)\nInfinity 無限大: infinity, -infinity\n+ : Addition 加法 (e.g. 3 + 5 = 8)\n- : Subtraction 減法 (e.g. 8 - 2 = 6)\n* : Multiplication 乘法 (e.g. 3 * 4 = 12)\n/ : Division 除法 (e.g. 10 / 5 = 2, 14 / 5 = 2.8)","通常在一般情況下使用的#通常在一般情況下使用的":"** : 指數運算 Exponentiation ( 2^3 => 2**3 )\n% : 取模運算 / 求餘數 Modulus / Remainder ( 5 % 2 == 1, 10 % 2 == 0 )","通常在循環中使用的#通常在循環中使用的":"(將在下一課中介紹更多)\n++ : 自增 (i++)\n-- : 自減 (i--)\n它是一種用於確定條件是否發生的數據類型。在此數據類型中，僅出現 true 和 false。\ntrue: 表示條件將發生 / 匹配。\nfalse: 表示條件將不會發生 / 不匹配。\n13 == 100 // Is 13 equal to 100 ? false\n100 > 50  // Is 100 bigger than 50 ? true\n0 < 2     // Is 0 smaller than 2 ? true\n\"tom\"   == \"hello tom\" // Is \"tom\" equal to \"hello tom\" ? false\n\"apple\" == \"apple\"   // Is \"apple\" equal to \"apple\" ? true\n在所有的程式語言中，幾個符號代表邏輯運算。\nand : 使用 &&\nor : 使用 ||\nnot : 使用 !\nand : 表示兩個條件都成立時，會回傳 true。\nor : 表示其中一個條件成立時，會回傳 true。\nnot : 反轉條件 (!true => false, !false => true)\n其實這是一個現實生活中的簡單問題或邏輯句子。如果我們要用表示一個條件：\n如果(If)今天是星期一，且(and)天氣沒有下雨，那麼我會去彼得家。\n在程式語言中，我們會這樣寫：\nif(today.day == \"monday\" && today.weather != \"raining\"){\n    goToPeterHome();\n}\n更複雜的條件可能會像這樣：\n這是湯姆。嘿，彼得，我想跟你玩一個遊戲。\n從1到6猜一個數字，我會開始擲骰子。\n如果數字是偶數且是1或6，你將贏得遊戲。\n如果數字是偶數但是是4，你將輸。\n但如果數字是奇數，你會輸。\n但如果數字是奇數且是3，你將贏得遊戲。\n如果你是湯姆，想要跟彼得玩一個遊戲，你會在程式語言中如何寫呢？samples.js\n// let assume this function will return a random number of 1 to 6\nlet diceNumber = randomDiceNumber(); \nif(diceNumber % 2 == 0 && diceNumber == 4){\n    lose()\n}\nelse if(diceNumber % 2 == 0 && (diceNumber == 1 || diceNumber == 6)){\n    win()\n}\nelse if(diceNumber % 2 == 1 && diceNumber == 3){\n    win()\n}\nelse if(diceNumber % 2 == 1){\n    lose()\n}\n（本課程中不會涵蓋，但在未來很重要）","常用的#常用的":"物件（Object） and 陣列（Array）\nNull and 未定義（Undefined）","進階的#進階的":"錯誤（Error）\n日期（Date）\n映射（Map） and 集合（Set）\n類別（Class）\nvar names = \"reemo\";\nlet age = 123;\nconst isMale = true;\n一般來說，我們可以使用var、let或const來定義變量。在大多數情況下（99.99%），由於歷史原因，我們不建議使用var.\n了解更多\n// <declare_words> <declare_variables_name> = <data_values>\nlet names = \"reemo\";\nconst age = 10;\nlet是一個定義詞，用於告訴計算機定義一個可更改的變量。\nconst 也是一樣的，但我們假設使用const定義的變量是在定義之後不能被更改的變量。\n使用let定義的變量可以被重新定義\n具有區塊作用域 (block-scope)\nlet names = \"reemo\";\nconsole.log(names) // reemo\nnames = \"tom\"\nconsole.log(names) // tom\n通常情況下，使用const定義的變量不能被重新定義。\n具有區塊作用域 (block-scope)\nconst names = \"reemo\";\nconsole.log(names) // reemo\nnames = \"tom\" // Cannot assign to 'names' because it is a constant.\nconsole.log(names) // error: Uncaught TypeError: Assignment to constant variable.\n在像array和object這樣的數據類型中使用const有例外情況，但我們首先假設所有const變量都不能被重新分配。\nCompare 比較運算子: ==, ===, !=, !==\nFor Maths 數學運算子: >, <, >=, <=\nLogics 邏輯運算子: if , else if, else\n==: 弱等於\n===: 強等於\n!=: 弱不等於\n!==: 強不等於\nStrong 意味著不僅值相同，而且數據類型也需要匹配。\nWeak 意味著如果值相同（無論是字符串還是數字），且內容相同，則返回 true。\n強等與弱等的例子\nlet num = 100; // type: number\nlet stringNum = \"100\" // type: string\nconsole.log( num == stringNum  ) // Weak compare: true\nconsole.log( num === stringNum ) // Strong compare: false\n注意事項：在這個例子中，num 是一個 number 的資料型態，但是 stringNum 是一個 string 的資料型態，儘管兩者都代表了 100。如果不確定要使用哪種比較類型，總是使用強比較 === !== 來確保安全。\n>: 大於\n>=: 大於或等於s\n<: 小於\n<=: 小於或等於\n10 > 6   // true\n5 < 89   // true\n10 > 10  // false, why? Since 10 not not bigger than 10, is equal to 10\n10 >= 10 // true\n內部程式碼將在條件滿足時運行\nif(){} 如果條件成立，運行這個區塊的程式碼。\nelse if(){} 如果前面的條件不成立，則檢查這個條件，如果成立，運行這個區塊的程式碼。\nelse{} 如果前面的所有條件都不成立，則運行這個區塊的程式碼。\ndemo.js\n// Only the conditions between the () is true, the under code will run\nif(true){\n    console.log(\"I will run yeah 😀\")\n}\nif(false){\n    console.log(\"I will NOT run oh no 😥\")\n}\nifDemo.js\nlet nums = 100;\nif(nums > 10){\n    nums += 23 // this code will run since 100 > 10 is true\n}\nconsole.log(nums) // 123\nifDemoTwo.js\nlet nums = 5;\nif(nums > 10){\n    nums += 23 // this code will NOT run since 5 > 10 is false\n}\nconsole.log(nums) // 5\ndemo.js\n// If the conditions in `if` is false, it will run the else code sections\nif(false){\n    console.log(\"I will NOT run oh no 😥\")\n}\nelse{\n    console.log(\"I will run yeah 😀\")\n}\nifElseDemo.js\nlet nums = 20;\nif(nums > 10){ \n    nums += 23 // if the nums > 10 is true, this line will run\n}\nelse{\n    nums -= 10 // if the nums > 10 is false, this line will run\n}\nconsole.log(nums) // 43\nifElseTwoDemo.js\nlet nums = 5;\nif(nums > 10){ \n    nums += 23 // if the nums > 10 is true, this line will run\n}\nelse{\n    nums -= 10 // if the nums > 10 is false, this line will run\n}\nconsole.log(nums) // -5\n以下代碼邏輯上是不一樣\nif(true){\n    console.log(\"I will run yeah 😀\")\n}\nconsole.log(\"I will run no matter if() is true or false\")\nif(false){\n    console.log(\"I will run yeah 😀\")\n}\nelse{\n    console.log(\"I will run But only if() is false\")\n}\nifElseDemo.js\nlet nums = 50;\nif(nums == 10){ \n   console.log(\"I am a 10\")\n}\nelse if(nums == 20){\n    console.log(\"I am a 20\")\n}\nelse{\n    console.log(\"nope\") // This line will be printed\n}\n// \"nope\"\nifElseDemo.js\nlet nums = 10;\nif(nums == 10){ \n   console.log(\"I am a 10\") // This line will be printed\n}\nelse if(nums == 20){\n    console.log(\"I am a 20\")\n}\nelse{\n    console.log(\"nope\") \n}\n// \"I am a 10\"\nifElseDemo.js\nlet nums = 20;\nif(nums == 10){ \n   console.log(\"I am a 10\") \n}\nelse if(nums == 20){\n    console.log(\"I am a 20\") // This line will printed\n}\nelse{\n    console.log(\"nope\") \n}\n// \"I am a 20\"\n函數是一個為了完成特定任務而設計的代碼塊。basic-function.js\nfunction myFunctionName(){\n    // Stuff to do when this function is called.\n    console.log(\"Hello mate.\")\n}\nmyFunctionName() // calling the function\n函數可以傳入參數，以便重複使用。basic-function-params.js\nfunction greetings(names){\n    // Stuff to do when this function is called.\n    console.log(\"Hello \" + names)\n}\ngreetings(\"peter\") // Hello peter\ngreetings(\"tom\") // Hello tom\n函數也可以傳入很多參數。basic-function-params.js\nfunction greetings(names, ages){\n    // Stuff to do when this function is called.\n    console.log(\"Hello \" + names)\n    console.log(\"Are you the age of \" + ages + \" ?\")\n}\ngreetings(\"peter\", 18) // Hello peter / Are you the age of 18 ?\ngreetings(\"tom\", 33) // Hello tom / Are you the age of 33 ?\n函數可以回傳 return 一個值，讓其他變數使用。function-return.js\nfunction returnSentences(names){\n    let sentences = \"Hello \" + names;\n    return sentences\n}\nlet myNameSentences = returnSentences(\"peter\"); //myNameSentences = \"Hello peter\" \nconsole.log(myNameSentences); // \"Hello peter\"\nconsole.log(returnSentences(\"tom\")); // \"Hello tom\"","進階函數箭頭函數#進階函數：箭頭函數":"在 JavaScript 中，函數也可以像這樣編寫：\nlet myFunction = (a, b) => a * b;\nPeter 想要定義一些變數，但他不知道該怎麼做。你可以幫他嗎？\n定義兩個 let 變數 income 和 outcome，其值分別為 10000 和 4000。\n定義兩個 const 變數 names 和 date，其值分別為 \"Peter\" 和 \"2022-03-06\"。\n定義一個 let 變數 total，它是基於 income - outcome 得出的總數。\nlab02-template.js\nlet someStuff = ...\nconst someStuffAlso = ...\n編寫一個程序，根據以下要求檢查學生的教育階段：如果學生的年齡小於5歲，他/她將處於未接受教育狀態。\n如果學生的年齡在6到12歲之間，他/她將處於小學狀態。\n如果學生的年齡在13到18歲之間，他/她將處於中學狀態。\n如果學生的年齡在19到22歲之間，他/她將處於大學狀態。\n如果學生的年齡大於23歲，他/她將處於工作狀態。lab02-template.js\nfunction calculateAgeStatus(age){\n    console.log(age)\n    // Your code\n}\n// Testing\ncalculateAgeStatus(4)  // 未接受教育\ncalculateAgeStatus(59) // 工作\ncalculateAgeStatus(16) // 中學\ncalculateAgeStatus(8)  // 小學\ncalculateAgeStatus(21) // 大學\n我們學習了以下內容：\n執行 app.js\n用 console.log 輸出變量\n資料型別 string, number, boolean\n算術運算符 ++, *, / 等等\n賦值運算符 =, +=, *=, /= 等等\n定義變量 let, const, var\n條件語句 if, else\n比較語句 ==, ===, <= 等等\n函數 function add(a,b){ return a + b }\nhttps://code.tecky.io/\nhttps://js.checkio.org/在本課程中，我們沒有涉及以下內容：\nObject, Array, for loop (物件、陣列、for 迴圈)\nArray Looping (for, while) (陣列迴圈 (for, while))\nScope (作用域)\n但如果有興趣，您可以自行閱讀 lecture-ex1 的內容。"}},"/lifeIsPossible/Lecture/lecture-04/lecture-04":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 04 - Introduce to JavaScript\nDeep into programming\nIntroduce to real programming with Javascript\nRelative Easy to learn as a beginner\nLearn once, use everywhere (web / desktop / linux)\nHigh popularity across the world\nhttps://www.stackscale.com/blog/most-popular-programming-languages/\nGreat community support and large library support npm\n🖥 Web browser (V8 engine base)\n📱 Android (V8 engine with browser)\n📲 IOS (V8 engine with browser)\n🖥 Windows (Nodejs)\n💻 MacOS (Nodejs)\n🖱 Linux (Nodejs)\nAlmost everything you can seen from daily life can run javascript.app.js\nlet str = \"reemo\"\nconsole.log(\"Hello all\");\nconsole.log(str);\nconsole.log(\"This is \" + str);\nThen type node app.js in the terminal to run the script.Notices: If you did not install the nodejs, install it from https://nodejs.org/en/ now.This is the fundamental function for javascript to print stuff","usage#Usage":"console.log(\"Hello world\"); // \"Hello world\"\nconsole.log(\"Hello \" + \"Peter\"); // \"Hello Peter\"\nconsole.log(\"Hello\", \"Peter\"); // \"Hello Peter\"\nconsole.log(100); // 100\nconsole.log(100 + 45); // 145\nData Types\nArithmetic Operators\nAssignment Operators\nDefine variables\nConditional Statements\nCompare Statements\nFunctions\nUsed to explain codes, and to make it more readable.\nCodes inside comments will not run / execute / complie\nSingle line comments start with //.\n// I will not run\n// console.log(\"Hello\")\n// Hello mate\nconsole.log(\"mate\")\nMulti-line comments start with /* and end with */.\n/*\nHello\nThis is multi line comments\nI can contains a lot of stuff\nin the same block\nconsole.log(\"Yoooo\")\n*/\nconsole.log(\"mate\")\nstring e.g. \"Hello\", \"Good day\", \"I go to school by bus\"\nnumber e.g. 12, -3, 32.476, 0x012, 11010010\nboolean e.g. true, false\nThe common string / char that we want to shows\n\"Hello world\", \"a\", \"😀\" (Using \" )\n'Hello mate', 'b', '😍' (Using ' )\n`Hello mom`, `c`, `😎` (Using ` )\nA data type to represent a number for math computations. ( +, -, *, /, % )\nInteger: 1, 384\nSigned Integer: 1, 384, -43\nFloat / Double: 1.23, -34.3423, 0.001\n(Float = single-precision, Double = double-precision)\nInfinity: infinity, -infinity\n+ : Addition (e.g. 3 + 5 = 8)\n- : Subtraction (e.g. 8 - 2 = 6)\n* : Multiplication (e.g. 3 * 4 = 12)\n/ : Division (e.g. 10 / 5 = 2, 14 / 5 = 2.8)","commons-in-general#Commons in general":"** : Exponentiation ( 2^3 => 2**3 )\n% : Modulus / Remainder ( 5 % 2 == 1, 10 % 2 == 0 )","commons-in-loop#Commons in loop":"(will cover more in next lesson)\n++ : Increment (i++)\n-- : Decrement (i--)\nA data type to determine the conditions will happends or not. ONLY true and false will be appares on this data type.\ntrue: Means the conditions will be happend / is match.\nfalse: Means the conditions will be NOT BE happend / is NOT match.\n13 == 100 // Is 13 equal to 100 ? false\n100 > 50 // Is 100 bigger than 50 ? true\n0 < 2 // Is 0 smaller than 2 ? true\n\"tom\" == \"hello tom\" // Is \"tom\" equal to \"hello tom\" ? false\n\"apple\" == \"apple\" // Is \"apple\" equal to \"apple\" ? true\nIn all programming languages, several symbo will be represent the logics.\nand : Using &&\nor : Using ||\nnot : Using !\nand : Means two conditions are true, then will return true.\nor : Means either one conditions is true, then will return true.\nnot : Reverse the conditions (!true => false, !false => true)\nActually this is an simple question or logic sentence in real life.If we want to represent a conditions in english like this:\nIf today is monday and the weather is not raining, then I will go to Peter's home.\nIn programming, we code like this:\nif(today.day == \"monday\" && today.weather != \"raining\"){\n    goToPeterHome();\n}\nA more complex conditions will be like this:\nThis is Tom. Hay Peter, I want to play a game with you. \nMake a guess between 1 to 6. And I start roll the dice.\nIf the number is a even and a one or a six, you will win the game.\nIf the number is a even but the number is 4, you will lose.\nYet, if the number is a odd, you will lose.\nBut, if the number is a odd and the number is 3, you will win.\nIf you are Tom and want to make a game to Peter, how's the login in programming languages?samples.js\n// let assume this function will return a random number of 1 to 6\nlet diceNumber = randomDiceNumber(); \nif(diceNumber % 2 == 0 && diceNumber == 4){\n    lose()\n}\nelse if(diceNumber % 2 == 0 && (diceNumber == 1 || diceNumber == 6)){\n    win()\n}\nelse if(diceNumber % 2 == 1 && diceNumber == 3){\n    win()\n}\nelse if(diceNumber % 2 == 1){\n    lose()\n}","common-will-cover-more-on-lecture#Common (Will cover more on lecture)":"Object and Array\nNull and Undefined","advance-will-not-cover-on-lecture-but-important-for-future#Advance (Will NOT cover on lecture, but important for future)":"Error\nDate\nMap and Set\nClass\nvar names = \"reemo\";\nlet age = 123;\nconst isMale = true;\nIn general, we can define a variable with var, let or const.In most of the case (99.99%), we DO NOT RECOMMENDED using var due to the legacy reasons. Know more\n// <declare_words> <declare_variables_name> = <data_values>\nlet names = \"reemo\";\nconst age = 10;\nlet is a define words to tell the computer to define a variable that can be changes.\nconst also, but we assume that variable define with const is the variable that CAN NOT be changed after it defined.\nDeclare variables with let can be re-define\nIs block-scope\nlet names = \"reemo\";\nconsole.log(names) // reemo\nnames = \"tom\"\nconsole.log(names) // tom\nIn commons, declare variables with const can NOT be re-define.\nIs block-scope\nconst names = \"reemo\";\nconsole.log(names) // reemo\nnames = \"tom\" // Cannot assign to 'names' because it is a constant.\nconsole.log(names) // error: Uncaught TypeError: Assignment to constant variable.\nThere is exceptions of using const in data type like array and object, but we assume all const variables are can not be re-assign first.\nCompare: ==, ===, !=, !==\nFor Maths: >, <, >=, <=\nLogics: if , else if, else\n==: Weak Equals to\n===: Strong Equals to\n!=: Weak Not Equals to\n!==: Strong Not Equals to\nStrong means not only values matches, but the data type need to be match too.\nWeak means if the values matches (no matter is string or number), if the content is the same, then it will return true.\nStrong and Weak examples\nlet num = 100; // type: number\nlet stringNum = \"100\" // type: string\nconsole.log( num == stringNum ) // Weak compare: true\nconsole.log( num === stringNum ) // Strong compare: false\nNotices: In this examples, num is a data type of number, but stringNum is a data type of string although both represents 100.IF you are not sure which compare type to use, always use strong === !== compare for safely reasons.\n>: Bigger than\n>=: Bigger than or equal to\n<: Smaller than\n<=: Smaller than or equal to\n10 > 6 // true\n5 < 89 // true\n10 > 10 // false, why? Since 10 not not bigger than 10, is equal to 10\n10 >= 10 // true\nInside code will run if the conditions fullfilled\nif(){}\nelse if(){}\nelse{}\ndemo.js\n// Only the conditions between the () is true, the under code will run\nif(true){\n    console.log(\"I will run yeah 😀\")\n}\nif(false){\n    console.log(\"I will NOT run oh no 😥\")\n}\nifDemo.js\nlet nums = 100;\nif(nums > 10){\n    nums += 23 // this code will run since 100 > 10 is true\n}\nconsole.log(nums) // 123\nifDemoTwo.js\nlet nums = 5;\nif(nums > 10){\n    nums += 23 // this code will NOT run since 5 > 10 is false\n}\nconsole.log(nums) // 5\ndemo.js\n// If the conditions in `if` is false, it will run the else code sections\nif(false){\n    console.log(\"I will NOT run oh no 😥\")\n}\nelse{\n    console.log(\"I will run yeah 😀\")\n}\nifElseDemo.js\nlet nums = 20;\nif(nums > 10){ \n    nums += 23 // if the nums > 10 is true, this line will run\n}\nelse{\n    nums -= 10 // if the nums > 10 is false, this line will run\n}\nconsole.log(nums) // 43\nifElseTwoDemo.js\nlet nums = 5;\nif(nums > 10){ \n    nums += 23 // if the nums > 10 is true, this line will run\n}\nelse{\n    nums -= 10 // if the nums > 10 is false, this line will run\n}\nconsole.log(nums) // -5\nFollowing code are not the same\nif(true){\n    console.log(\"I will run yeah 😀\")\n}\nconsole.log(\"I will run no matter if() is true or false\")\nif(false){\n    console.log(\"I will run yeah 😀\")\n}\nelse{\n    console.log(\"I will run But only if() is false\")\n}\nifElseDemo.js\nlet nums = 50;\nif(nums == 10){ \n   console.log(\"I am a 10\")\n}\nelse if(nums == 20){\n    console.log(\"I am a 20\")\n}\nelse{\n    console.log(\"nope\") // This line will printed\n}\n// \"nope\"\nifElseDemo.js\nlet nums = 10;\nif(nums == 10){ \n   console.log(\"I am a 10\") // This line will printed\n}\nelse if(nums == 20){\n    console.log(\"I am a 20\")\n}\nelse{\n    console.log(\"nope\") \n}\n// \"I am a 10\"\nifElseDemo.js\nlet nums = 20;\nif(nums == 10){ \n   console.log(\"I am a 10\") \n}\nelse if(nums == 20){\n    console.log(\"I am a 20\") // This line will printed\n}\nelse{\n    console.log(\"nope\") \n}\n// \"I am a 20\"\nfunction is a block of code designed to perform a particular task.basic-function.js\nfunction myFunctionName(){\n    // Stuff to do when this function is called.\n    console.log(\"Hello mate.\")\n}\nmyFunctionName() // calling the function\nA function can be pass in params for the purpose of re-use.basic-function-params.js\nfunction greetings(names){\n    // Stuff to do when this function is called.\n    console.log(\"Hello \" + names)\n}\ngreetings(\"peter\") // Hello peter\ngreetings(\"tom\") // Hello tom\nA function can be pass a lot of params too.basic-function-params.js\nfunction greetings(names, ages){\n    // Stuff to do when this function is called.\n    console.log(\"Hello \" + names)\n    console.log(\"Are you the age of \" + ages + \" ?\")\n}\ngreetings(\"peter\", 18) // Hello peter / Are you the age of 18 ?\ngreetings(\"tom\", 33) // Hello tom / Are you the age of 33 ?\nA function can be return a values for other variable to use too.function-return.js\nfunction returnSentences(names){\n    let sentences = \"Hello \" + names;\n    return sentences\n}\nlet myNameSentences = returnSentences(\"peter\"); //myNameSentences = \"Hello peter\" \nconsole.log(myNameSentences); // \"Hello peter\"\nconsole.log(returnSentences(\"tom\")); // \"Hello tom\"\nIn javascript, a function can also code like this\nlet myFunction = (a, b) => a * b;\nPeter want's to define some variables but he don't know how to do. Can you help him?\nDefine two let variables income and outcome\nwith values 10000 and 4000.\nDefine two const variables names and date\nwith values \"Peter\" and \"2022-03-06\".\nDefine a let variable total that base on income - outcome to get the total count.\nlab02-template.js\nlet someStuff = ...\nconst someStuffAlso = ...\nWrite a program to check the student education stages by the following requirement:If the student age lower than 5, he / she will be in Not educated\nIf the student age between 6 to 12, he / she will be in Primary school\nIf the student age between 13 to 18, he / she will be in Secondary school\nIf the student age between 19 to 22, he / she will be in University\nIf the student age bigger 23, he / she will be in Workingconsole.log() the status if the age match that status.lab02-template.js\nfunction calculateAgeStatus(age){\n    console.log(age)\n    // your code\n}\n// Testing\ncalculateAgeStatus(4)  // Not educated\ncalculateAgeStatus(59) // Working\ncalculateAgeStatus(16) // Secondary school\ncalculateAgeStatus(8)  // Primary school\ncalculateAgeStatus(21) // University\nWe have learn the:\nRun a app.js\nPrint variables with console.log\nData Types string, number, boolean\nArithmetic Operators ++, *, / ...\nAssignment Operators =, +=, *=, /= ...\nDefine variables let, const, var\nConditional Statements if, else\nCompare Statements ==, ===, <= ...\nFunctions function add(a,b){ return a + b }\nhttps://code.tecky.io/\nhttps://js.checkio.org/We skipper these concepts in this course\nObject, Array, for loop\nArray Looping (for, while)\nScope\nBut you can read it by your own if interested in lecture-ex1"}},"/lifeIsPossible/Lecture/lecture-05/lecture-05-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"講課 05 - 使用 JavaScript 與 HTML 互動\n在 HTML 中使用 JS\nDOM 控制\n制作一個小小的測驗遊戲","回顧#回顧":"我們在之前的課程中學到了什麼？\nlet a = 10;\nif(a === 10){\n  console.log(\"Hello mate\")\n}\nfunction calculateAgeStatus(age){\n    console.log(`You are in ${age} right?`)\n}\ncalculateAgeStatus(16)","回顧總結#回顧總結":"執行 app.js\n用 console.log 輸出變量\n資料型別 string, number, boolean\n算術運算符 ++, *, / 等等\n賦值運算符 =, +=, *=, /= 等等\n定義變量 let, const, var\n條件語句 if, else\n比較語句 ==, ===, <= 等等\n函數 function add(a,b){ return a + b }\n如果 JavaScript 放在 HTML 中呢？我們有一個 HTML 文件作為快速小測驗，我們該如何知道使用者輸入了正確的答案？糟糕了，HTML 只用於定義元素。不行。CSS 只用於樣式。對，但為什麼？JavaScript 是 HTML 中的大腦，它幫助執行所有計算/邏輯渲染工作。例如：是否有東西被點擊？計算使用者輸入的總和。在 HTML 中，我們可以添加 <script> 標籤來使用 JavaScript。\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n</head>\n<body>\n    <h1> Yo all </h1>\n    <script> <!-- Add me for using script -->\n        console.log(\"Hello all\")\n    </script>\n</body>\n</html>\n<script> \n      let a = 100;\n      let b = 23;\n      let c = a + b;\n      console.log(c); // where is it logged to?\n</script>\n在網頁中按下右鍵或按下 F12 開啟 DevTools ，然後在右上方尋找 Console。讓我們假設有以下的 HTML：index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 class=\"yolo\">yolo hi</h3>\n</body>\n</html>\n一般來說，我們有以下兩個方法可以取得相對應的元素，兩個方法都是網頁內建的。\n// getElementBy\nconst msgBox = document.getElementById('msg'); // Is a id\nconst yoloBox = document.getElementsByClassName(\"yolo\"); // Is a array\n// querySelector\nconst msgBoxQu = document.querySelector('#msg'); // Is a id\nconst yoloBoxQu = document.querySelector(\".yolo\"); // Not a array\n// 因為 msg 是一個 id，所以我們需要加上 #\n// 因為 yolo 是一個 class，所以我們需要加上 .\n這些方法可以幫助我們取得相關的元素。一般來說，我們可以在 DOM 元素中加入事件：\nconst msgBox = document.getElementById('msg');\n// When the msgBox box clicked, a message box will be pop up \nmsgBox.addEventListener(\"click\", function() {\n    alert(\"Hello mate\")\n});\nindex.html with const\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <script>\n        const msgBox = document.getElementById('msg');\n        // When the msgBox box clicked, a message box will be pop up \n        msgBox.addEventListener(\"click\", function() {\n            alert(\"Hello mate\")\n        });\n    </script>\n</body>\n</html>\nindex.html with document\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <script>\n        // When the msgBox box clicked, a message box will be pop up \n        document.getElementById('msg').addEventListener(\"click\", function() {\n            alert(\"Hello mate\")\n        });\n    </script>\n</body>\n</html>\n您也可以通過 innerHTML 控制元素的消息。index.html with const\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 id=\"yolo\">yolo hi</h3>\n    <script>\n        const msgBox = document.getElementById('msg');\n        const yoloBox = document.getElementById('yolo');\n        msgBox.addEventListener(\"click\", function() {\n            yoloBox.innerHTML = \"hello ar\"\n        });\n    </script>\n</body>\n</html>\nindex.html with document\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 id=\"yolo\">yolo hi</h3>\n    <script>\n        document.getElementById('msg').addEventListener(\"click\", function() {\n            document.getElementById('yolo').innerHTML = \"hello ar\"\n        });\n    </script>\n</body>\n</html>\ncounter.html\n<body>\n    <h3 id=\"counter\">0</h3>\n    <button id=\"addCount\">add num</button>\n    <script>\n        const counterNumber = document.getElementById('counter');\n        const addCount = document.getElementById('addCount');\n        addCount.addEventListener(\"click\", function() {\n            let originalNUmber = parseInt(counterNumber.innerHTML)\n            originalNUmber ++;\n            counterNumber.innerHTML = originalNUmber\n        });\n    </script>\n</body>\n在 HTML 中，我們有一個標籤 <input>，允許用戶輸入內容。\nHTML 的 <input> 元素用於創建交互式控件，以便接受用戶從網頁表單中輸入的數據。\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input<input> 標籤用於獲取用戶輸入的數據，並將其發送回服務器/本地進行檢查。例如，我們可以像這樣使用 <input> 標籤：\n<input id=\"textInput\" type=\"text\">\n<input id=\"numberInput\" type=\"number\">\n<input \n    type=\"file\" id=\"fileInput\"\n    id=\"avatar\" name=\"avatar\"\n    accept=\"image/png, image/jpeg\"\n>\n支持以下類型：\ntext, number, date\npassword, email\ncheckbox, radio\ncolor, url\nweek, month, time, datetime-local, date\ntel, range\nsubmit, reset\n以及更多...在 JavaScript 中要取得 <input> 的值，必須先給予它一個 id 或 class。index.html\n<input id=\"textInput\" type=\"text\" value=\"hello\">\n接著，在 JavaScript 中，我們可以使用 .value 屬性來取得它的值。index.js\nconst textInput = document.getElementById(\"textInput\");\nconsole.log(textInput.value);\n為了偵測使用者的輸入事件，我們可以使用 addEventListener 與 input 事件來聆聽輸入事件。index.html\n<input id=\"textInput\" type=\"text\">\nindex.js\nconst textInput = document.getElementById(\"textInput\");\ntextInput.addEventListener(\"input\", () => {\n    console.log(textInput.value)\n})\n如果要取得多個不同的 <input>，必須為每個 <input> 元素分別指定不同的 id。\n<input id=\"textInput\" type=\"text\">\n<input id=\"englishInput\" type=\"text\">\nindex.js\nconst textInput = document.getElementById(\"textInput\");\nconst englishInput = document.getElementById(\"englishInput\");\ntextInput.addEventListener(\"input\", () => {\n    console.log(textInput.value)\n})\nenglishInput.addEventListener(\"input\", () => {\n    console.log(englishInput.value)\n})\n撰寫一個數學測驗的網站，每次會產生不同的數學題目及答案，並依據使用者輸入來檢查答案是否正確。範例:\n這一次的題目是 10 + 23 = ?\n其他時間的題目是 10 + 36 = ?\n另一次的題目是 10 + 2 = ?\n您可以參考 quiz.html 檔案進行實作。提示 1: 使用 Math.floor(Math.random() * 30) 產生一個隨機整數。tips1.js\nlet rngNum = Math.floor( Math.random() * 30) + 1;\ntips2.html\n<h3>Questions: 10 + <p id=\"rngNumberBox\"></p> = ?</h3>\n如果您已經完成了練習 1，請嘗試調整題目為：\n問題: 10 + x = 45，找出 x 的值\n問題: 14 + x = 32，找出 x 的值\n製作一個網站，要求使用者輸入 x，並檢查 x 是否符合方程式。答案也應該是隨機產生的。"}},"/lifeIsPossible/Lecture/lecture-05/lecture-05":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 05 - Interact JS in HTML\nUsing JS in html\nDOM control\nMaking a mini quiz game","recall#Recall":"What we have learn in previous lessons?\nlet a = 10;\nif(a === 10){\n  console.log(\"Hello mate\")\n}\nfunction calculateAgeStatus(age){\n    console.log(`You are in ${age} right?`)\n}\ncalculateAgeStatus(16)","recall-summary#Recall Summary":"Run a app.js\nPrint variables with console.log\nData Types string, number, boolean\nArithmetic Operators ++, *, / ...\nAssignment Operators =, +=, *=, /= ...\nDefine variables let, const, var\nConditional Statements if, else\nCompare Statements ==, ===, <= ...\nFunctions function add(a,b){ return a + b }\nWhat if javascript in HTML?We have a html file for a quick quiz\nHow can we know the user input the correct ans?Opps, HTML is only for elementsNope. CSS is only for styleCorrect, but why?Javascript is the brain in HTML\nIt helps to do all the calculate / logics rendering jobExample of: Is something clicked? Calculate the sum of user inputs.In html, we would add a <script> tag for using javascript.\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>Document</title>\n</head>\n<body>\n    <h1> Yo all </h1>\n    <script> <!-- Add me for using script -->\n        console.log(\"Hello all\")\n    </script>\n</body>\n</html>\n<script> \n      let a = 100;\n      let b = 23;\n      let c = a + b;\n      console.log(c); // where is it logged to?\n</script>\nRight click in your html OR press F12 to open the DevTools\nThen find the Console in the right top sections.Let's assume we have the HTML like thisindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 class=\"yolo\">yolo hi</h3>\n</body>\n</html>\nIn general, we have these function to get the regarding elements. Both function are build in for web.\n// getElementBy\nconst msgBox = document.getElementById('msg'); // Is a id\nconst yoloBox = document.getElementsByClassName(\"yolo\"); // Is a array\n// querySelector\nconst msgBoxQu = document.querySelector('#msg'); // Is a id\nconst yoloBoxQu = document.querySelector(\".yolo\"); // Not a array\n// Since msg is a id, so we need to add #\n// Since yolo is a class, so we need to add .\nThose function can help us to get the regarding elements.In general, we can add event to the DOM elements:\nconst msgBox = document.getElementById('msg');\n// When the msgBox box clicked, a message box will be pop up \nmsgBox.addEventListener(\"click\", function() {\n    alert(\"Hello mate\")\n});\nindex.html with const\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <script>\n        const msgBox = document.getElementById('msg');\n        // When the msgBox box clicked, a message box will be pop up \n        msgBox.addEventListener(\"click\", function() {\n            alert(\"Hello mate\")\n        });\n    </script>\n</body>\n</html>\nindex.html with document\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <script>\n        // When the msgBox box clicked, a message box will be pop up \n        document.getElementById('msg').addEventListener(\"click\", function() {\n            alert(\"Hello mate\")\n        });\n    </script>\n</body>\n</html>\nYou can control the messgae of the elements by innerHTML too.index.html with const\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 id=\"yolo\">yolo hi</h3>\n    <script>\n        const msgBox = document.getElementById('msg');\n        const yoloBox = document.getElementById('yolo');\n        msgBox.addEventListener(\"click\", function() {\n            yoloBox.innerHTML = \"hello ar\"\n        });\n    </script>\n</body>\n</html>\nindex.html with document\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h3 id=\"msg\">Hello mate</h3>\n    <h3 id=\"yolo\">yolo hi</h3>\n    <script>\n        document.getElementById('msg').addEventListener(\"click\", function() {\n            document.getElementById('yolo').innerHTML = \"hello ar\"\n        });\n    </script>\n</body>\n</html>\ncounter.html\n<body>\n    <h3 id=\"counter\">0</h3>\n    <button id=\"addCount\">add num</button>\n    <script>\n        const counterNumber = document.getElementById('counter');\n        const addCount = document.getElementById('addCount');\n        addCount.addEventListener(\"click\", function() {\n            let originalNUmber = parseInt(counterNumber.innerHTML)\n            originalNUmber ++;\n            counterNumber.innerHTML = originalNUmber\n        });\n    </script>\n</body>\nIn HTML, we have a tag <input> which allow user to input stuff\nThe HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/inputThe input tag is used to get the user enter data and send back to server / local checking.For examples, we use the <input> tags like this\n<input id=\"textInput\" type=\"text\">\n<input id=\"numberInput\" type=\"number\">\n<input \n    type=\"file\" id=\"fileInput\"\n    id=\"avatar\" name=\"avatar\"\n    accept=\"image/png, image/jpeg\"\n>\nFollowing type are supported\ntext, number, date\npassword, email\ncheckbox, radio\ncolor, url\nweek, month, time, datetime-local, date\ntel, range\nsubmit, reset\nAnd more ...To get the input value in javascript, you need to assign a id / calss to an input tag first.index.html\n<input id=\"textInput\" type=\"text\" value=\"hello\">\nThen, in javascript, we have to do it with .valueindex.js\nconst textInput = document.getElementById(\"textInput\");\nconsole.log(textInput.value);\nTo detect the user input event, we have to use addEventListener with input to listen the type event.index.html\n<input id=\"textInput\" type=\"text\">\nindex.js\nconst textInput = document.getElementById(\"textInput\");\ntextInput.addEventListener(\"input\", () => {\n    console.log(textInput.value)\n})\nTo detect different input, assign DIFFERENT id to each <input > elements for it.\n<input id=\"textInput\" type=\"text\">\n<input id=\"englishInput\" type=\"text\">\nindex.js\nconst textInput = document.getElementById(\"textInput\");\nconst englishInput = document.getElementById(\"englishInput\");\ntextInput.addEventListener(\"input\", () => {\n    console.log(textInput.value)\n})\nenglishInput.addEventListener(\"input\", () => {\n    console.log(englishInput.value)\n})\nWrite a math quiz site that each time will generate a different math question and answer. And each time will regarding the user input to check if the answer match the sum.Examples:\nThis time is 10 + 23 = ?\nOther time is 10 + 36 = ?\nAnother time is 10 + 2 = ?\nYou can references to quiz.html for this labTips 1: Using Math.floor( Math.random() * 30) to generate a random integer number.tips1.js\nlet rngNum = Math.floor( Math.random() * 30) + 1;\ntips2.html\n<h3>Questions: 10 + <p id=\"rngNumberBox\"></p> = ?</h3>\nIf you are doing quick in lab 1, try to adjust the questions to this:Questions: 10 + x = 45, find x\nQuestions: 14 + x = 32, find xGenerate a site that require user to input x, and check if the x can fullfill the equations.The answer should random too."}},"/lifeIsPossible/Lecture/lecture-06/lecture-06-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"講課 06 - 進階- Github、部署、規劃\nGithub 和 Github Desktop\n使用Vercel進行部署\n計畫和結構網站\n分組和討論\nhttps://github.com/\nGitHub是一個在線軟件開發平台。它用於存儲、跟踪和協作軟件項目。\n大多數程序員和IT公司使用它\n用於協作和代碼版本控制\n你可以把Github視為程序員版的 Google Drive\n所有代碼都會使用git上傳到Github\nhttps://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home點擊上面的鏈接先註冊一個帳戶。如果你還沒有電子郵件，現在就註冊一個gmail帳戶。\n每個項目都被稱為 repository（又稱為 repo）\n我們將創建一個 repository，並將所有項目代碼上傳到該 repository 中\n按照以下步驟創建一個倉庫：您應該從 Github 首頁開始，點擊 右上角的加號 + 圖標，選擇 New repository將倉庫命名為 <your_name>-project-website，然後選擇 Private向下滾動並取消選中 Add a README file，然後點擊 Create a repository如果完成，您將看到相應的屏幕。https://desktop.github.com/您將看到相應的屏幕，點擊 Download for XXXX 按鈕進行下載。下載完成後，點擊 Sign in with Github.com 進行登錄。成功登錄後，您可能會看到相應的屏幕（不包含內容）\n💻 一個基於 GUI 的 git 軟體\n📡 容易上手的 git 管理 GUI\n🧰 免費且強大\n在初步階段，我們將使用 Github Desktop 來 push，clone，pull，merge 專案。如果您對編程有興趣，當您熟悉 Github Desktop 後，您可以學習 git。如果您還沒完成Lab 01-03，請先完成這些實驗室。在這個實驗室中，我們將進行以下操作：\n克隆(Clone)代碼\n在本地電腦上調整代碼\n推送代碼到 Github\n回到這個畫面，您可以在畫面中央左側看到一個名為 Set up in Desktop 的按鈕。點擊它。點擊後會彈出以下畫面。選擇一個適當的 本地路徑，然後點擊藍色的 Clone 按鈕。Clone 完成後，您會看到這個畫面。檢查左上角的部分是否是您的存儲庫名稱。右鍵點擊左上角的部分，然後選擇 Open in Visual Stuidio Code 進入 VSC。在文件夾中創建一個 index.html 和 apple.html。將這些內容複製到 index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>index</title>\n</head>\n<body>\n    <h1>Hello world</h1>\n    <a href=\"/apple.html\"> Go to apple </a>\n</body>\n</html>\n將這些內容複製到 apple.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>apple</title>\n</head>\n<body>\n    <h1>Hello apple</h1>\n    <a href=\"/index.html\"> Go to index </a>\n</body>\n</html>\n回到 Github Desktop，選擇 index.html 和 apple.html\n在 Summary (required) 輸入框中輸入內容\n輸入後，點擊 Commit to main\n現在你可以點擊 Published branch 按鈕了。點擊後等待上傳。如果你從 Github 網站重新整理頁面(F5)並看到 index.html 和 apple.html，表示你成功了。\nSet up in Desktop => git clone\n克隆一個項目表示下載一個項目\nType in Summary (required) + Commit to main => git commit\n提交表示對代碼庫進行了更改\nClick Published branch => git push\n推送表示將這些更改添加到分支中\n🖥 電腦？\n🖨 物聯網裝置？\n📱 手機？\n📟 設備？\n💻 伺服器？\n我們需要一個伺服器來為使用者提供我們的網站/內容。伺服器將幫助我們為目標用戶提供所需的數據。","自我託管#自我託管?":"","雲端託管saas#雲端託管（SaaS）？":"一種軟件授權和交付模式，其中軟件以訂閱方式許可並集中託管。SaaS也被稱為'按需軟件'和Web-based/Web-hosted軟件\n例如：AWS，Azure，GCP，Digital ocean，vercel等...\n網站託管服務是一種互聯網託管服務，為客戶提供託管網站所需的設施，即使其創建和維護網站，並在全球資訊網上進行訪問。提供網站託管服務的公司有時被稱為網站託管服務提供商。\n也就是說，您可以從雲端提供商公司租用伺服器。\nVercel 是為前端開發人員打造的平台，提供創新者創造靈感時需要的速度和可靠性。\n在這個實驗室中，我們將部署Lab 04 的 Github 儲存庫到 vercel。（免費）打開 https://vercel.com/ ，並點擊 sign up。在該頁面中，點擊 Continus with GitHub 並進行註冊。如果您可以看到此頁面，請點擊右上角的 Add New..，並選擇 Project。選擇您的 repo，點選 import。\n注意: 如果您尚未在 vercel 中授權 github，請先授權。在此頁面，只需點擊 Deploy，等待部署完成即可。恭喜，您已經成功將網站部署到全球！\n點擊 Continus to Dashboard 並獲取 DOMAINS 網址。一個隨機的 DOMAINS 將被指定給您。這是您的網站所屬的網址。您可以將鏈接分享給他人。請嘗試單擊它並將鏈接分享給他人。回到具有您的專案的 VSC。\n現在，嘗試向我們的 index.html 添加更多代碼。添加任何您喜歡的內容，甚至可以打開新頁面。打開一個名為 images 的 folder，並添加一個圖像。在 apple.html 中，在 <body> 中添加 <img> 標記，並參照圖像apple.html 樣本\n<img src=\"/images/hero.png\" alt=\"a nice image\">\nsamples回到 Github Desktop，執行與 Lab 04 - 步驟 8 相同的操作\n在左下角輸入提交消息\n點擊 Commit to main\n點擊右上方的 Push origin\n返回 vercel 並打開專案，您將看到網站已更新。每當發生推送時，vercel 將知道您的專案已更新並使用最新版本重新部署。✨ 實際上，vercel 將使用 Github Actions 自動進行 CI / CD 進行部署。每組由2至4名學生組成，並於接下來的三週進行專案開發。開發完成後，PWA應部署至Vercel以供公眾使用。\n組員: 自由分組，每組由2至4名學生組成\n時限: 三週（主要在講堂上 => 共6小時）\n演示: 第10週\n主題: 生命教育 / 珍惜生命 / 其他，請選擇其中一個主題\n每人至少完成2頁內容\n（2人組 => 4頁，3人組 => 6頁）\nPWA必須有index.html作為首頁，其他頁面則包含其餘內容。\n設計網頁時，需考慮大多數使用者使用iphone、android phone和ipad。\n學生應在同一個版本庫上工作，而不是每個學生都有自己的版本庫。\n學生在編寫程式前應該先規劃網站的結構、主題、頁面、功能和風格。\n移動響應式不是必須的，但最好具備以提高使用者體驗和使用者介面的品質。\n每個小組應在 Vercel 上部署 PWA，以供公眾訪問。\n小組需要確保部署的 PWA 如預期運行正常 (有效的連結、可運行的功能、沒有無效的圖片 和 href 等)。\n導師/助教可以協助將應用程式/網頁部署到 Google Play 商店。","pwa-技能#PWA 技能":"HTML5, CSS, Javascript","部署管理技能#部署/管理技能":"Github / Guthub Desktop (管理)\nVercel (部署)","軟實力#軟實力":"溝通 & 團隊合作\n批判性思考 & 邏輯思考\n由導師和 TA 團隊評分\n總分 100 分 + 10% 獎勵分數 (最高 100 分)\n內容 (25%)\n創意 / 設計 (25%)\n團隊合作和溝通 (25%)\n技術技能 (15%)\n演示 - Presentations (10%)\n獎勵分數 (10% 獎勵, 最高 10%)","1-內容-25#1. 內容 (25%)":"優秀的想法和主題 (10% - 0%)\n與內容相關的有趣 / 互動性強的內容 (15% - 0%)","2-創意--設計-25#2. 創意 / 設計 (25%)":"優秀的 UI 佈局 / 創意 (10% - 0%)\n優秀的 UX 設計 (10% - 0%)\n正確使用圖片 / 視頻 / gif / 圖示 (5% - 0%)","3-團隊合作和溝通-25#3. 團隊合作和溝通 (25%)":"每人至少完成 2 頁 (5%)\n整個團隊完成項目 (10% - 0%)\n優秀的團隊氛圍 (10% - 0%)","4-技術技能-15#4. 技術技能 (15%)":"在項目中使用 Github and Github desktop / git (5% / 0%)\n在項目中使用 Vercel 部署項目 (5% / 0%)\n在項目中使用 javascript / html / CSS (5% / 0%)","5-演示---presentations-10#5. 演示 - Presentations (10%)":"所有團隊成員展示相關頁面 (5%)\n優秀的演示表現 (5% - 0%)","6-獎勵-10-獎勵最高-10#6. 獎勵 (10% 獎勵，最高 10%)":"在項目中使用講義未涵蓋的技術 (例如 AOC、animate.css、sweetAlert2...) (0 - 10%)\n在項目中採用其他框架 (0 - 10%)\n有關更多信息，請參見 project/demo-project/README.md。"}},"/lifeIsPossible/Lecture/lecture-06/lecture-06":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 06 - Adv topic - Github, Deployment and Planning\nGithub and Github Desktop\nDeployment with vercel\nPlanning and structure a website\nGrouping and discussions\nhttps://github.com/\nGitHub is an online software development platform. It's used for storing, tracking, and collaborating on software projects.\nMajority of programmers and IT firm use it\nFor collaborating and code version control\nYou can assume Github is the programmer version Google Drive\nAll codes will be upload to github with git\nhttps://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-homeFollowing the link to register a account first. If you do not have a email, register a gmail now.\nEach project is named repository (AKA repo)\nWe will create a repository and upload all project codes in the repository\nFollow the steps to create a repository:You should start on the Github home pages and click the top right plus + icons, select New repositoryName the repo to <your_name>-project-website and select PrivateScroll down and un-tick the Add a README file, then click Create a repositoryIf you are done, you will see the regarding screen.https://desktop.github.com/You will see the regarding screen, click the Download for XXXX button to process the download.After downloaded, click Sign in with Github.com to loginUpon a success login, you may see the regarding screen (without the content)\n💻 A GUI base git software\n📡 Easy git management GUI to learn\n🧰 Free and powerful\nIn early stages, we will use the Github desktop to push, clone , pull, merge the project.\nAfter you have fimilar with Github desktop, you may learn git in the future if you are interested in coding.If you not not done the lab 01-03 yet, please finish those lab first.We will process the following things in this lab:\nClone the code\nAdjust code in local PC\nPush the code to github\nBack to this screen, you may see a button of Set up in Desktop in middle left of the screen. Click it.This screen will pop up after you clicked. Select a proper Local path and click the Blue Clone button.You will be in this screen after the Clone. Check if the top left section is your repo name or not.Right click the top left section and select Open in Visual Stuidio Code to enter the vsc.Create a index.html and apple.html in the folder first.Copy these content to index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>index</title>\n</head>\n<body>\n    <h1>Hello world</h1>\n    <a href=\"/apple.html\"> Go to apple </a>\n</body>\n</html>\nCopy these content to apple.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>apple</title>\n</head>\n<body>\n    <h1>Hello apple</h1>\n    <a href=\"/index.html\"> Go to index </a>\n</body>\n</html>\nBack to github desktop, select both index.html and apple.html\ntype something in Summary (required) input box.\nAfter typing, click Commit to main\nYou can click the Published branch button now. Click and wait for upload.If you refresh the pages from the github website and see both index.html and apple.html, means you are success.\nSet up in Desktop => git clone\nClone a project means download a project\nType in Summary (required) + Commit to main => git commit\nCommit means having changes to the code base\nClick Published branch => git push\nPush mean add those changes to the branch\n🖥 Computer?\n🖨 IoT devices?\n📱 Phones?\n📟 Devices?\n💻 Server?\nWe need a server for users to get our website / content.Server will help us to serve the target user regarding their desire data.","self-hosting-#Self hosting ?":"","cloud-hosting-saas-#Cloud hosting (SaaS) ?":"Is a software licensing and delivery model in which software is licensed on a subscription basis and is centrally hosted. SaaS is also known as \"on-demand software\" and Web-based/Web-hosted software\nExamples: AWS, Azure, GCP, Digital ocean, vercel and more...\nA web hosting service is a type of Internet hosting service that hosts websites for clients, i.e. it offers the facilities required for them to create and maintain a site and makes it accessible on the World Wide Web. Companies providing web hosting services are sometimes called web hosts.\nAKA You can rent a server from cloud provider company.\nVercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration.\nIn this lab, we will deploy the lab 04 Github repo to vercel. (Free)Open https://vercel.com/ and click sign up. In that pages, click Continus with GitHub and process the register.If you cna see this page, click top right Add New.. and select Project.Select your repo to click import.\nNotices: If you have not grant access to github in vercel, grant the access first.In this page, just click Deploy and wait for the deployment happens.Congratulations, you are success to deploy the website to the world!\nClick Continus to Dashboard and obtain the DOMAINS url.A random DOMAINS will be assign to you. And this is the url that your website belongs to. You can share the link to others. Try to click it and share the link to others.Back to your VSC with your project.\nNow, try to add more code to our index.htmlAdd whatever you like, even open a new page is okOpen a folder call images and add a image to it.In  apple.html, add a <img> tag inside <body> and references the imagesapple.html samples\n<img src=\"/images/hero.png\" alt=\"a nice image\">\nsamplesBack to Github Desktop, do the same things as Lab 04 - Step 8\nType commit message in bottom left\nClick Commit to main\nClick Push origin in middle top\nBack to the vercel and open the project, you will see the website is updated.Whenever a push occur, vercel will know that your project is updated and re-deploy with the latest version.✨ In dept, vercel will apply the auto CI / CD with Github Actions for the deployment.2 to 4 student will be in a group, and the following 3 weeks will be the project period. A PWA will be developed and deploy to Vercel for publics to access.\nGroup members: 2 to 4 student Free grouping\nPeriod: 3 weeks (Mostly in lecture time)\nPresent: Week 10\nTopics: 生命教育 / 珍惜生命 / 其他 Choose one\nEach person should done at least 2 pages\n(2 ppl group = > 4 pages)\n(3 ppl group = > 6 pages)\nThe PWA must have a index.html for home pages and others pages for the remaining content.\nFor the PWA, you should design the web that assume most users are using iphone , android phone and ipad.\nStudent should work on the same repository instead of each student have their own repository.\nStudent should plan the website structure, theme, page, features and style before codings.\nMobile responsive is not a must but better have it for the sake of user experiences and UI.\nEach group should be deploy the PWA in vercel\nGropus should ensure the deployed PWA works as expected (Valid links, workable functions, no dead images and href ect...)","pwa-skills#PWA skills":"HTML5\nCSS\nJavascript","deployment--management-skills#Deployment / management skills":"Github / Guthub Desktop (Management)\nVercel (Deployment)\nHere are some tips for your planning:\nDetermine the Project topic first\nThen think about the features (what we need in our PWA)\nConsider the style and theme\nDetermine what pages to have and WHO work on it\nOpen a Github repository and invite all groupmates.\nOpen those blank pages / folder / file first and have a git push.\nOther groupmates git pull the file and start working.\nSubmit your group List to: TBD\nEach group are require to submit it by one person only."}},"/lifeIsPossible/Lecture/lecture-07/lecture-07-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 07 - 項目週 1以下是一些規劃建議：\n先決定 項目主題\n再考慮所需的 功能（我們的PWA需要什麼）\n想想 風格 和 主題\n確定我們需要哪些 頁面 以及由誰來負責\n開設一個 Github 儲存庫並邀請所有團隊成員。\n先創建這些空白的 頁面 / 文件夾 / 檔案 並進行 git push。\n其他團隊成員 git pull 檔案並開始工作。\"\n每組都會在 vercel 上部署 PWA，其他人可以訪問該網站。在最後一堂課上，我們將有一個演示環節。每組將有 4-8 分鐘的時間向其他人展示 PWA。\n成員：建議所有成員都應該參加演示\n時間：4-8 分鐘\n內容：PWA 的功能，其他人可以在 PWA 上做什麼...\n其他：不一定需要使用 PPT"}},"/lifeIsPossible/Lecture/lecture-07/lecture-07":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 07 - Project Week 1Here are some tips for your planning:\nDetermine the Project topic first\nThen think about the features (what we need in our PWA)\nThink about the style and theme\nDetermine what pages we need to have and WHO work on it\nOpen a Gituhb repository and invite all groupmates.\nOpen those blank pages / folder / file first and have a git push.\nOther groupmates git pull the file and start working.\nEach group will deploy the PWA in vercel and others can be able to access the site.We will have a presentations section at the last lecture.Each group will have a 4-8 minutes time to present the PWA to others.\nMembers: Suggested all members should attend the presentations\nTime: 4-8 minutes\nContent: Features of the PWA, what can others to do on the PWA ...\nOthers: PPT is not a must"}},"/lifeIsPossible/overall-chinese":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"PWA應用程式工作坊介紹\n目標\n先決條件\n成果\n詳細內容\n時間表\n啟發對STEM相關領域有興趣的學生。\n能夠編寫簡單的網站/應用程式/PWA應用程式。\n了解編碼的運作方式和批判性思考。\n基本控制電腦的知識(Windows/MacOS或Linux)。\n對網絡技術/編碼感興趣。\n基本HTML/ICT/編碼知識是一個優勢(不是必須的)。\n能夠在編碼IDE中執行操作。\n高級程式語言的基本編碼技能。\n學習服務器部署流程。\n了解程序員/軟件工程師的概念。\n發展批判性思維和創造力。\n能夠使用 VS code 編輯器進行編碼。\n理解編碼的定義及程序員的職責。\n能夠基本使用高階語言進行編碼 (JS / HTML / CSS)。\n使用 bulma 或其他框架增強 UI / UX。\n使用 Github 和 Github Desktop 進行協作和版本控制。\n使用 Vercel 或 Netlify 部署 PWA。","語言#語言:":"學習材料為英文 / 粵語\n教學講解為粵語","學習期#學習期:":"總共 7 堂課 + 3 堂項目課 (共 10 天)\n每週六開課，共計 7 堂課，每堂課時長 2 小時 (1 小時課程 + 45 分鐘實驗 + 15 分鐘休息)\n項目課時長 3 小時，共 2 堂\n每週六 1600 - 1800每組由2至4名學生組成，並於接下來的三週進行專案開發。開發完成後，PWA應部署至Vercel以供公眾使用。\n組員: 自由分組，每組由2至4名學生組成\n時限: 三週（主要在講堂上 => 共6小時）\n演示: 第10週\n主題: 生命教育 / 珍惜生命 / 其他，請選擇其中一個主題\n每人至少完成2頁內容\n（2人組 => 4頁，3人組 => 6頁）\nPWA必須有index.html作為首頁，其他頁面則包含其餘內容。\n設計網頁時，需考慮大多數使用者使用iphone、android phone和ipad。\n學生應在同一個版本庫上工作，而不是每個學生都有自己的版本庫。\n學生在編寫程式前應該先規劃網站的結構、主題、頁面、功能和風格。\n移動響應式不是必須的，但最好具備以提高使用者體驗和使用者介面的品質。\n每個小組應在 Vercel 上部署 PWA，以供公眾訪問。\n小組需要確保部署的 PWA 如預期運行正常 (有效的連結、可運行的功能、沒有無效的圖片 和 href 等)。\n導師/助教可以協助將應用程式/網頁部署到 Google Play 商店。","pwa-技能#PWA 技能":"HTML5, CSS, Javascript","部署管理技能#部署/管理技能":"Github / Guthub Desktop (管理)\nVercel (部署)","軟實力#軟實力":"溝通 & 團隊合作\n批判性思考 & 邏輯思考\n由導師和 TA 團隊評分\n總分 100 分 + 10% 獎勵分數 (最高 100 分)\n內容 (25%)\n創意 / 設計 (25%)\n團隊合作和溝通 (25%)\n技術技能 (15%)\n演示 - Presentations (10%)\n獎勵分數 (10% 獎勵, 最高 10%)","1-內容-25#1. 內容 (25%)":"優秀的想法和主題 (10% - 0%)\n與內容相關的有趣 / 互動性強的內容 (15% - 0%)","2-創意--設計-25#2. 創意 / 設計 (25%)":"優秀的 UI 佈局 / 創意 (10% - 0%)\n優秀的 UX 設計 (10% - 0%)\n正確使用圖片 / 視頻 / gif / 圖示 (5% - 0%)","3-團隊合作和溝通-25#3. 團隊合作和溝通 (25%)":"每人至少完成 2 頁 (5%)\n整個團隊完成項目 (10% - 0%)\n優秀的團隊氛圍 (10% - 0%)","4-技術技能-15#4. 技術技能 (15%)":"在項目中使用 Github and Github desktop / git (5% / 0%)\n在項目中使用 Vercel 部署項目 (5% / 0%)\n在項目中使用 javascript / html / CSS (5% / 0%)","5-演示---presentations-10#5. 演示 - Presentations (10%)":"所有團隊成員展示相關頁面 (5%)\n優秀的演示表現 (5% - 0%)","6-獎勵-10-獎勵最高-10#6. 獎勵 (10% 獎勵，最高 10%)":"在項目中使用講義未涵蓋的技術 (例如 AOC、animate.css、sweetAlert2...) (0 - 10%)\n在項目中採用其他框架 (0 - 10%)\n我們將為前兩名小組提供一些鼓勵獎品。有關更多信息，請參見 project/demo-project/README.md。"}},"/lifeIsPossible/overall":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"PWA Apps workshop intro\nAims\nPerquisites\nOutputs\nDetails\nSchedule\nEnlighten students interested in STEM-related fields.\nAble to code a simple website / apps / PWA.\nUnderstand how coding works and critical thinking.\nBasic knowledge of controlling computers (Windows / MacOS or Linux)\nInterest in web technology / coding\nBasic HTML / ICT / Coding knowledge is a plus (Not a must)\nAble to perform actions in coding IDE.\nBasic coding skill in high level languages.\nLearn server deployment process.\nEdge knowledge of what is a programmer / software engineer.\nDevelop critical thinking and creativity.\nAble to use an IDE VS code to code.\nUnderstanding what is coding and what are programmers duties.\nBasic coding in high levels languages (JS / HTML / CSS).\nImport bulma and other framework to enhance the UI / UX.\nUsing Github and Github Desktop for co-op and version control.\nUsing Vercel or Netlify to deploy PWA.","languages#Languages:":"Materials in English\nTutoring / Talks in Cantonese","period#Period:":"Total 7 lectures + 3 project lectures (10 days)\nEvery Saturday week day starting from 15/04/2023 in 1400 - 1600\nLecture arrangement: 2 * 7 hours (1 hour lecture + 45 hour lab, 15 mins breaks)\nProject lectures arrangement: 2 * 3 hours team project time\nPeriod: 1400 - 1600 each saturday2 to 3 student will be in a group, and the following 3 weeks will be the project period. A PWA will be developed and deploy to Vercel for publics to access.\nGroup members: 2 to 4 student Free grouping\nPeriod: 3 weeks (Mostly in lecture time => 6 hours)\nPresentations: Week 10\nTopics: 生命教育 / 珍惜生命 / 其他 Choose one\nEach person should done at least 2 pages\n(2 ppl group = > 4 pages)\n(3 ppl group = > 6 pages)\nThe PWA must have a index.html for home pages and others pages for the remaining content.\nFor the PWA, you should design the web that assume most users are using iphone , android phone and ipad.\nStudent should work on the same repository instead of each student have their own repository.\nStudent should plan the website structure, theme, page, features and style before codings.\nMobile responsive is not a must but better have it for the sake of user experiences and UI.\nEach group should be deploy the PWA in vercel\nGropus should ensure the deployed PWA works as expected (Valid links, workable functions, no dead images and href ect...)\nTutor / TA may help for deploying apps / web to Google play store.","pwa-skills#PWA skills":"HTML5, CSS, Javascript","deployment--management-skills#Deployment / management skills":"Github / Guthub Desktop (Management)\nVercel (Deployment)","softs-skills#Softs skills":"Communications & teamwork\nCritical thinking & logical thinking\nScore by tutors and TA's\nTotal 100 + 10 Bonus (Max 100)\nContent (25%)\nCreative / Design (25%)\nTeam-work & communications (25%)\nTech Skills (15%)\nPresentations (10%)\nBonus (10% Bonus, Max 10%)","1-content-25#1. Content (25%)":"Great ideas and topics (10% - 0%)\nInteresting / Interactive with regarding content (15% - 0%)","2-creative--design-25#2. Creative / Design (25%)":"Great UI layout / Creative ideas (10% - 0%)\nGreat UX design (10% - 0%)\nWith proper images / video / gif / icon usgae (5% - 0%)","3-team-work--communications-25#3. Team-work & communications (25%)":"Each person should done at least 2 pages (5%)\nWhole group finished the project (10% - 0%)\nGreat team atmosphere (10% - 0%)","4-tech-skills-15#4. Tech Skills (15%)":"Using Github and Github desktop / git in the project (5% / 0%)\nUsing Vercel to deploy the project (5% / 0%)\nUsing all javascript / html / CSS in the project (5% / 0%)","5-presentations-10#5. Presentations (10%)":"All teammate present the regarding pages (5%)\nGreat presentations performances (5% - 0%)","6-bonus-10-bonus-max-10#6. Bonus (10% Bonus, Max 10%)":"Using tech that did not cover in the lecture (e.g AOC, animate.css, sweet alert2 ...) (0 - 10 %)\nAdapt other framework in the project (0 - 10 %)\nWe will give the top 2 groups several award for encouragement.See project/demo-project/README.md for more info."}},"/lifeIsPossible/Lecture/lecture-01/lecture-01":{"title":"Life is Possible - 生命教育 手機程式工作坊","data":{"":"Lecture 01 - Introduce to Programming\nWhat is coding / programmers do?\nWhy do we need to code?\nWhat should I learn for?\nInstall and setup\nLab time\nSitting in front of the computer 8 hours a day?\nTalking to the computers?\nEndless typing and typing?\nDrinking coffee all days?\nprint(\"Hello world\")?\nMore...?","-thinking#🤔 Thinking":"","-coding#💻 Coding":"","-communicating#🎤 Communicating":"","-learning#📚 Learning":"Interested in CS / EE related fields?\nFor jobs?\nCoding is cool!\nMy mom told me to do so!?\nFor fun?\nect...?","big-hypothesis-programmers-have-to-code#Big hypothesis: Programmers have to code":"","small-hypothesis-some-job-roles-needs-to-code-not-only-programmers#Small hypothesis: Some job roles needs to code, not only programmers":"Q.E.D?","various-type-of-coding-related-languages#Various type of Coding related languages":"","-software-engineers#💻 Software Engineers":"Java / C# / Rust / Kotlin\nJavaScript / Typescript\nPHP / HTML / CSS","-devops-related#🔌 DevOps related":"JSON / YMAL\nPython\nJavaScript / Typescript","-data--ai#📑 Data / AI":"Python\nR\nExcel","-security#🛡 Security":"Linux operations\nPHP / JS / Python ...\nMore audit tools ...","computer-related-jobs#Computer related jobs":"","-software-engineers-1#💻 Software Engineers":"Mobile Apps developers <- Here\nFrontend developers <- Here\nBackend developers","-devops#🔌 DevOps":"DevOps Engineer\nCloud Engineer\nArchitecture Engineer","-data--ai-1#📑 Data / AI":"Deep learning Engineer\nMachine learning Engineer\nData researchers","-security-1#🛡 Security":"Information Security Engineer\nWhite hacker\nRisk Manager\nhttps://roadmap.sh/frontend/\nhttps://roadmap.sh/react/\nand more...\nFundamental HTML\nFundamental CSS\nFundamental Javascript\nUse of Github and Github Desktop\nVercel or Netlify to deploy\nA Web apps (PWA) that deploy to cloud services / applications in Google Play.\nHTML is the standard markup language for Web pages\nTo learn how to write a website structure with it.\nCSS is the language we use to style an HTML document.\nTo learn how to beauty a website with it.\nJavaScript is the programming language of the Web.\nTo learn how to programming in HTML documents.\nGitHub, Inc is an Internet hosting service for software development and version control using Git.\nTo learn how to use github for deploy projects.\nVercel is the platform for frontend developers, providing the speed and reliability innovators need to create at the moment of inspiration.\nTo learn how to deploy the website in the internet.\nYou can learn to write a real app with React Native javascript in the future.\n(https://reactnative.dev/)\nJavascript is multi-use and widely adapts in various fields.\nBackend with express.js, frontend with Vue / React / Svelte, AI with tensorflow.js ...\nGood to learn the fundamentals, then go to apps development if interested.\nInstalling Visual Studio Code (VSC)\nInstalling Nodejs\nFree\nHuge community\nEasy to use\nPowerfull in assisting JS / HTML / CSS coding\nRelatively light weight and cross platform\nhttps://code.visualstudio.com/\nOpen a File\nEnter the File with code . in terminal\n(MacOS: https://code.visualstudio.com/docs/setup/mac)\n(Cmd+Shift+P => type Shell Command: Install 'code' command in PATH then enter)\nCreate a file\nCreate a folder\nDelete a folder / file\nUsing VSC terminal with pwd / cd / ls\nInstalling extensions","pwd--cd--ls-cheatsheet#pwd / cd / ls cheatsheet":"","pwd-print-work-directory#pwd (print work directory)":"pwd will print where you are at the terminal.","cd-change-directory#cd (change directory)":"cd <filename> will goto that folder e.g. cd public.\ncd .. will back to the previous folder path.","ls-list-directory#ls (list directory)":"ls will list all the file / folder in the terminal.\nls -a / ls -la will list all details in the terminal.\nA javascript base runtime for PC\nFor running javascript on PC\nCompile javascript to machine code\nhttps://nodejs.org/en/\nOpen your (Windows: Powershell / CMD ) (MacOS: Terminal)\nType node --version then press enter.\nIf you see this message, means you are successful to install.\nPS C:\\Users\\reemo> node --version\nv18.13.0\nBy using the vsc, create a folder call <your_name>-apps-lab1, then create a play.js file inside the folder. Also, create a folder call public, then creating two file named index.html and hello.htmlNotes 1: <your_name> means you name, if I am peter, name the folder peter-apps-lab1Using VSC in index.html, copy the following text to the file\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h1>Hi i am peter</h1>\n</body>\n</html>\nThen rename the peter to your name. Then open the index.html.In play.js, copy the following text to the file.\n// play.js\nconsole.log(\"Hello I am peter\")\ntype node play.js then see if these messages are printed on the terminal.\nPS D:\\apps-workshops\\lecture-01\\lab> node play.js\\\nHello I am peter\nThen rename the peter to your name, then try the node play.js again."}}}